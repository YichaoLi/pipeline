#pipeline for power spectrum

pipe_modules = []
pipe_processes = 1

"""  Peak remove : clean map -> pkrm clean map"""
#from mkpower import pkrm
#pipe_modules.append(pkrm.PeakRemove)
pr_processes = 1
pr_plot = False
#pr_plot = True
pr_input_root = '../maps/'
pr_output_root = '../powerresult/'
pr_hr = ('15hr_40-41-43_', '15hr_42_')
pr_mid = 'cleaned_clean_map_'
pr_polarizations = ('I',)


"""  Weight : clean map -> dirty map"""
#from mkpower import weight
#pipe_modules.append(weight.NoiseInversWeight)
wt_processes = 1
wt_plot = False
wt_input_root = pr_output_root
wt_output_root = '../powerresult/'
wt_hr = ('pkrm_15hr_40-41-43_', 'pkrm_15hr_42_')
wt_mid = 'cleaned_clean_map_'
wt_polarizations = ('I',)


"""  Calculate the Pk  """
#from mkpower import mkpower
#pipe_modules.append(mkpower.PowerSpectrumMaker)
pk_processes = 1
pk_plot = True
pk_saveweight = True
pk_input_root = wt_output_root
#pk_output_root = '../jkresult/'
pk_output_root = '../powerresult/'
#pk_output_root = '../check/'
pk_hr = ('pkrm_15hr_40-41-43_', 'pkrm_15hr_42_')
pk_mid = 'dirty_map_'
pk_polarizations = ('I',)
pk_boxshape = (128, 64, 32)
pk_discrete = 7
pk_boxunit = 7.0
pk_Xrange = (1400,)
pk_Yrange = (-288, 288)
pk_Zrange = (0.0, 288.0)
#pk_boxshape = (512, 64, 32)
#pk_boxshape = (60, 60, 60)
#pk_discrete = 3
#pk_boxunit = 15.0
#pk_Xrange = (1400,)
#pk_Yrange = (-450, 450)
#pk_Zrange = (0.0, 900.0)
#pk_boxshape = (60, 20, 20)
#pk_discrete = 3
#pk_boxunit = 15.0
#pk_Xrange = (1400,)
#pk_Yrange = (-150, 150)
#pk_Zrange = (0.0, 300.0)

"""  Calling CAMB """
#from mkpower import pycamb
#pipe_modules.append(pycamb.CAMB)
output_root = '../powerresult/'
transfer_redshift = 1.

"""  Calculate the WindowF  """
#from mkpower import windowf
#pipe_modules.append(windowf.WindowFunctionMaker)
wd_processes = 1
wd_plot = True
wd_input_root = wt_output_root
#wd_output_root = '../jkresult/'
wd_output_root = '../powerresult/'
#wd_output_root = '../check/'
wd_boxshape = (128, 64, 32)
wd_boxunit = 7.0

"""  Calculate the nonlinear Power Spectrum  """
from mkpower import nonlpower
pipe_modules.append(nonlpower.TheoryPowerSpectrumMaker)
wd_processes = 1
#wd_plot = True
wd_plot = False
wd_input_root = wt_output_root
wd_output_root = '../powerresult/'
wd_boxshape = (128, 64, 32)
wd_boxunit = 7.0

wd_OmegaHI = 1.e-3
wd_Omegam = 0.24
wd_OmegaL = 0.76
wd_z = 1.

"""  Make JackKnife Map """
#from mkpower import jkmap
#pipe_modules.append(jkmap.JackKnifeErrorMap)
jm_processes = 1
jm_plot = False
jm_input_root = wt_output_root
jm_jkn0 = 10
jm_jkn1 = 5
jm_jkn2 = 3
jm_hr = ('pkrm_15hr_40-41-43_', 'pkrm_15hr_42_')
jm_mid = 'dirty_map_'
jm_polarizations = ('I',)
jm_output_root = '../powerresult/'


"""  Calculate the jk error (Better run in mpi)"""
#from mkpower import jkerror
#pipe_modules.append(jkerror.JackKnifeError)
jk_processes = 1
jk_plot = False
jk_input_root = jm_output_root
jk_jknumber = 150
jk_hr = ('pkrm_15hr_40-41-43_', 'pkrm_15hr_42_')
jk_mid = 'dirty_map_'
jk_polarizations = ('I',)
jk_output_root = '../powerresult/'
jk_boxshape = pk_boxshape
jk_discrete = pk_discrete
jk_boxunit = pk_boxunit
jk_Xrange = pk_Xrange
jk_Yrange = pk_Yrange
jk_Zrange = pk_Zrange


#Plot
from mkpower import plot
pipe_modules.append(plot.PowerSpectrumPlot)
pt_processes = 1
pt_input_root = jm_output_root
pt_output_root = '../powerresult/'
