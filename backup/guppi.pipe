# Pipeline file for guppi data.

import os

from core import dir_data
import scipy as sp


field = '15hr'
file_middles = tuple(dir_data.get_data_files(range(41,52), '15hr', 
                                             type='guppi'))
#file_middles = tuple(dir_data.get_data_files(range(51,52), '15hr', 
#                                             type='guppi'))
#file_middles = tuple(dir_data.get_data_files([40], '15hr', 
#                                             type='guppi'))

base_dir = os.getenv('GBT10B_OUT')
data_dir = base_dir + '/guppi_data/'
prefix = ''
map_prefix = 'med_' + field + '_41-51_'

pipe_modules = []
pipe_processes = 12


#from time_stream import hanning 
#pipe_modules.append(hanning.Hanning)
ha_input_root = data_dir
ha_file_middles = file_middles
ha_input_end = ".fits"
ha_output_root = base_dir + 'hanning/' + prefix
ha_output_end = ".fits"
ha_scans = ()
# All following steps will inherit this choice by default (because these are
# the only IF's saved to the following fits files).
ha_IFs = ()

#from time_stream import flag_data
#pipe_modules.append(flag_data.FlagData)
fd_input_root = ha_output_root
fd_file_middles = file_middles
fd_input_end = '.fits'
fd_output_root = base_dir + 'flagged/' + prefix
fd_output_end = '.fits'
fd_scans = ()
fd_IFs = ()

fd_sigma_thres = 5
fd_pol_thres = 5
fd_pol_width = 1
fd_flatten_pol = True
fd_derivative_cuts = 5
fd_derivative_width = 1


#from time_stream import rebin_freq
#pipe_modules.append(rebin_freq.RebinFreq)
rf_input_root = fd_output_root
rf_file_middles = file_middles
rf_input_end = '.fits'
rf_output_root = base_dir + 'rebinned/' + prefix
rf_output_end = '.fits'
rf_scans = ()
rf_IFs = ()

rf_channel_width = 2.0
rf_mean_instead_median = False

#from time_stream import cal_scale
#pipe_modules.append(cal_scale.CalScale)
cs_input_root = rf_output_root
cs_file_middles = file_middles
cs_input_end = '.fits'
cs_output_root = base_dir + 'cal_scaled/' + prefix
cs_output_end = '.fits'
cs_scans = ()
cs_IFs = ()

cs_scale_time_average = True
cs_scale_freq_average = False
cs_subtract_time_median = False

#from time_stream import calibrate
#pipe_modules.append(calibrate.Calibrate)
cl_input_root = cs_output_root
cl_file_middles = file_middles
cl_input_end = '.fits'
cl_output_root = base_dir + 'calibrated/' + prefix
cl_output_end = '.fits'
cl_scans = ()
cl_IFs = ()

cl_cal_temperature_files = (os.getenv('GBT10B_OUT') + 'kevin_cal/cal_21.fits',)

#from time_stream import rotate_pol
#pipe_modules.append(rotate_pol.RotatePol)
rp_input_root = cl_output_root
rp_file_middles = file_middles
rp_input_end = '.fits'
rp_output_root = base_dir + 'pol_selected/' + prefix
rp_output_end = '.fits'
rp_scans = ()
rp_IFs = ()

rp_new_pols = (1,)
rp_average_cals = False

#from time_stream import combine_cal
#pipe_modules.append(combine_cal.CombineCal)
cc_input_root = rp_output_root
cc_file_middles = file_middles
cc_input_end = '.fits'
cc_output_root = base_dir + 'combined/' + prefix
cc_output_end = '.fits'
cc_scans = ()
cc_IFs = ()

cc_subtract_time_mean = False
cc_average_cal_states = True

from map import dirty_map
#pipe_modules.append(dirty_map.DirtyMapMaker)
dm_input_root = cc_output_root
dm_file_middles = file_middles
dm_input_end = '.fits'
dm_output_root = base_dir + 'maps/' + map_prefix
dm_scans = ()
dm_IFs = (0,)

dm_field_centre = (218., 2.0)
#dm_map_shape = (66, 36)
#dm_map_shape = (20, 10)
dm_map_shape = (64, 32)
dm_pixel_spacing = .075
#dm_pixel_spacing = .03
dm_noise_model = 'disjoint_scans'
dm_polarizations = ('I',)
dm_noise_parameters_input_root = 'None'

from map import clean_map
#pipe_modules.append(clean_map.CleanMapMaker)
cm_input_root = dm_output_root
cm_output_root = cm_input_root
cm_polarizations = ('I',)

#from time_stream import subtract_map_data
#pipe_modules.append(subtract_map_data.Subtract)
sm_input_root = cc_output_root
sm_file_middles = file_middles
sm_input_end = '.fits'
sm_output_root = base_dir + 'map_subtracted/'
sm_output_end = '.fits'
sm_scans = ()
sm_IFs = ()

sm_pols = ()
sm_map_file = base_dir + 'maps/' + map_prefix + 'clean_map_I.npy'
s_solve_for_gain = True
sm_gain_output_end = '_gain.pickle'

#from time_stream import reflag
#pipe_modules.append(reflag.ReFlag)
sf_input_root = cc_output_root
sf_file_middles = file_middles
sf_input_end = '.fits'
sf_output_root = base_dir + 'reflagged/'
sf_output_end = '.fits'
sf_scans = ()
sf_IFs = ()

sf_thres = 3.0
sf_subtracted_input_root = sm_output_root
sf_subtracted_output_root = base_dir + 'reflag_sub/'

#from noise import measure_noise
#pipe_modules.append(measure_noise.Measure)
mn_input_root = sf_subtracted_input_root
mn_file_middles = file_middles
mn_input_end = '.fits'
mn_output_root = base_dir + 'noise_measurments/'

mn_model = "scan_var"

if True :
  from map import dirty_map
  pipe_modules.append(dirty_map.DirtyMapMaker)
  dm_input_root = cc_output_root
  dm_file_middles = file_middles
  dm_input_end = '.fits'
  dm_output_root = base_dir + 'maps/' + "sec_" + map_prefix
  dm_scans = ()
  dm_IFs = (0,)

  dm_field_centre = (218., 2.0)
  #dm_map_shape = (66, 36)
  #dm_map_shape = (20, 10)
  dm_map_shape = (64, 32)
  dm_pixel_spacing = .075
  #dm_pixel_spacing = .03
  dm_noise_model = 'disjoint_scans'
  dm_polarizations = ('I',)
  dm_noise_parameters_input_root = mn_output_root

  from map import clean_map
  pipe_modules.append(clean_map.CleanMapMaker)
  cm_input_root = dm_output_root
  cm_output_root = cm_input_root
  cm_polarizations = ('I',)



