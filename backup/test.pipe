#pipeline for power spectrum

pipe_modules = []
pipe_processes = 1


filelist = ('test_', 'test_')
middlist = ('signal_map_yuebin_', 'noise_map_yuebin_')
lastlist = ('3', '4')
polarization = ('',)
input_root = '../maps/test/'
output_root = '../testresult_2/'
#FKPweight = True 
FKPweight = False 

""" Pipe line """
from mkpower import prepare
pipe_modules.append(prepare.Prepare)
#
from mkpower import mkpower
pipe_modules.append(mkpower.PowerSpectrumMaker)
#
#from mkpower import mkcrosspower
#pipe_modules.append(mkcrosspower.CrossPowerSpectrumMaker)
#
#from mkpower import pycamb
#pipe_modules.append(pycamb.CAMB)
#
#from mkpower import windowf
#pipe_modules.append(windowf.WindowFunctionMaker)
#
#from mkpower import nonlpower
#pipe_modules.append(nonlpower.TheoryPowerSpectrumMaker)
#
#from mkpower import windowplot
#pipe_modules.append(windowplot.WindowFunctionPlot)
#
#from mkpower import jkmap
#pipe_modules.append(jkmap.JackKnifeErrorMap)
#
#from mkpower import jkerror
#pipe_modules.append(jkerror.JackKnifeError)
#
#from mkpower import plot
#pipe_modules.append(plot.PowerSpectrumPlot)
""" End """


"""  Peak remove : clean map -> pkrm clean map"""
#from mkpower import pkrm
#pipe_modules.append(pkrm.PeakRemove)
pr_processes = 1
pr_plot = False
#pr_plot = True
pr_input_root = input_root
pr_output_root = output_root
pr_hr = filelist
pr_mid = middlist
pr_polarizations = polarization
pr_last = lastlist

#filelist = ('pkrm_'+filelist[0], 'pkrm_'+filelist[1])

"""  Prepare """
#from mkpower import prepare
#pipe_modules.append(prepare.Prepare)
pre_processes = 3
pre_plot = False
#pre_plot = True
pre_input_root = input_root
pre_output_root = output_root
pre_hr = filelist
pre_mid = middlist
pre_polarizations = polarization
pre_last = lastlist
pre_boxshape = (128, 128, 128)
pre_discrete = 8
pre_boxunit = 8.0
pre_Xrange = (1400,)
pre_Yrange = (-pre_boxunit*pre_boxshape[1]*0.5, 
   	 			pre_boxunit*pre_boxshape[1]*0.5)
pre_Zrange = (10.0, pre_boxunit*pre_boxshape[2])

"""  Weight : clean map -> dirty map"""
#from mkpower import weight
#pipe_modules.append(weight.NoiseInversWeight)
wt_processes = 1
wt_plot = False
wt_input_root = pr_output_root
wt_output_root = output_root
wt_hr = filelist
wt_mid = middlist
wt_polarizations = polarization


"""  Calculate the Pk  """
#from mkpower import mkpower
#pipe_modules.append(mkpower.PowerSpectrumMaker)
pk_processes = 1
pk_plot = False 
pk_plot = True
pk_saveweight = True
pk_input_root = wt_output_root
pk_output_root = output_root
pk_hr = filelist
pk_mid = middlist
pk_polarizations = polarization
pk_last = lastlist
pk_boxshape = pre_boxshape
pk_discrete = pre_discrete
pk_boxunit = pre_boxunit
pk_Xrange = pre_Xrange
pk_Yrange = pre_Yrange
pk_Zrange = pre_Zrange

pk_kbinNum = 40

#pk_FKPweight = True
pk_FKPweight = FKPweight
pk_OmegaHI = 1.e-3
pk_Omegam = 0.24
pk_OmegaL = 0.76

"""  Calculate the Cross Pk  """
#from mkpower import mkcrosspower
#pipe_modules.append(mkcrosspower.CrossPowerSpectrumMaker)
cpk_processes = 1
cpk_plot = False 
cpk_saveweight = True
cpk_input_root = wt_output_root
cpk_output_root = output_root
cpk_hr = filelist
cpk_mid = middlist
cpk_polarizations = polarization
cpk_last = lastlist
cpk_boxshape = (256, 64, 32)
cpk_discrete = 4
cpk_boxunit = 8.0
cpk_Xrange = (1400,)
cpk_Yrange = (-pk_boxunit*pk_boxshape[1]*0.5, 
				pk_boxunit*pk_boxshape[1]*0.5)
cpk_Zrange = (0.0, pk_boxunit*pk_boxshape[2])

#cpk_FKPweight = True
cpk_FKPweight = FKPweight
cpk_OmegaHI = 1.e-3
cpk_Omegam = 0.24
cpk_OmegaL = 0.76

"""  Calling CAMB """
#from mkpower import pycamb
#pipe_modules.append(pycamb.CAMB)
pcb_output_root = output_root
pcb_transfer_redshift = 0.7
pcb_transfer_high_precision = 'T'
pcb_transfer_kmax = 1.5
#pcb_transfer_k_per_logint = 400

"""  Calculate the WindowF  """
#from mkpower import windowf
#pipe_modules.append(windowf.WindowFunctionMaker)
wd_processes = 1
#wd_plot = False
wd_plot = True
wd_input_root = wt_output_root
wd_output_root = output_root
wd_hr = filelist
wd_mid = middlist
wd_polarizations = polarization
wd_last = lastlist
wd_boxshape = pk_boxshape
wd_boxunit = pk_boxunit
wd_FKPweight = FKPweight
wd_discrete = 4
wd_Xrange = (1400,)
wd_Yrange = (-pk_boxunit*pk_boxshape[1]*0.5, 
              pk_boxunit*pk_boxshape[1]*0.5)
wd_Zrange = (0.0, pk_boxunit*pk_boxshape[2])

"""  Calculate the nonlinear Power Spectrum  """
#from mkpower import nonlpower
#pipe_modules.append(nonlpower.TheoryPowerSpectrumMaker)
nl_processes = 1
nl_plot = True
nl_plot = False
nl_hr = filelist
nl_mid = middlist
nl_polarizations = polarization
nl_last = lastlist
nl_input_root = wt_output_root
nl_output_root = output_root
#nl_boxshape = pk_boxshape
#nl_boxunit = pk_boxunit
nl_boxshape = (256, 256, 256)
nl_boxunit = 32.
nl_boxshapelist = ((256,256,256),(256,256,256))
nl_boxunitlist = (32.0, 8.0)
nl_FKPweight = FKPweight
nl_discrete = 4
nl_Xrange = (1400,)
nl_Yrange = (-pk_boxunit*pk_boxshape[1]*0.5, 
              pk_boxunit*pk_boxshape[1]*0.5)
nl_Zrange = (0.0, pk_boxunit*pk_boxshape[2])

nl_OmegaHI = 1.e-3
nl_Omegam = 0.24
nl_OmegaL = 0.76
nl_z = 1.

""" Window Function Plot  """
#from mkpower import plot
#pipe_modules.append(plot.PowerSpectrumPlot)
wpt_processes = 1
wpt_input_root = nl_output_root
wpt_hr = filelist
wpt_last = lastlist
wpt_output_root = output_root
wpt_FKPweight = True
wpt_boxshape = ((256,256,256), (256,256,256))
wpt_boxunit = (8.0, 32.0)

"""  Make JackKnife Map """
#from mkpower import jkmap
#pipe_modules.append(jkmap.JackKnifeErrorMap)
jm_processes = 4
jm_plot = False
jm_input_root = input_root
jm_jkn0 = 8
jm_jkn1 = 4
jm_jkn2 = 4
jm_hr = filelist
jm_mid = middlist
jm_polarizations = polarization
jm_last = lastlist
jm_output_root = output_root + 'jkmap/'
jm_boxshape = pre_boxshape
jm_discrete = pre_discrete
jm_boxunit = pre_boxunit
jm_Xrange = pre_Xrange
jm_Yrange = pre_Yrange
jm_Zrange = pre_Zrange


"""  Calculate the jk error (Better run in mpi)"""
#from mkpower import jkerror
#pipe_modules.append(jkerror.JackKnifeError)
jk_processes = 1
jk_plot = False
jk_input_root = jm_output_root
jk_jknumber = 128
jk_hr = filelist
jk_mid = middlist
jk_polarizations = polarization
jk_last = lastlist
jk_output_root = output_root
jk_boxshape = pk_boxshape
jk_discrete = pk_discrete
jk_boxunit = pk_boxunit
jk_Xrange = pk_Xrange
jk_Yrange = pk_Yrange
jk_Zrange = pk_Zrange
jk_kbinNum = pk_kbinNum

#jk_FKPweight = False
jk_FKPweight = pk_FKPweight
jk_OmegaHI = 1.e-3
jk_Omegam = 0.24
jk_OmegaL = 0.76
jk_z = 1.


"""  Plot  """
#from mkpower import plot
#pipe_modules.append(plot.PowerSpectrumPlot)
pt_processes = 1
pt_input_root = jk_output_root
pt_hr = filelist
pt_last = lastlist
pt_output_root = output_root
pt_FKPweight = FKPweight
pt_OmegaHI = 1.e-3
pt_Omegam = 0.24
pt_OmegaL = 0.76
jk_z = 1.
